// Khai b√°o c√°c g√≥i th∆∞ vi·ªán
import express from "express"; // Framework d√πng ƒë·ªÉ x√¢y d·ª±ng ·ª©ng d·ª•ng web v√† API
import bodyParser from "body-parser"; // Middleware ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ body c·ªßa request(JSON ho·∫∑c URL-encoded)
import sql from "mssql"; // Th∆∞ vi·ªán d√πng ƒë·ªÉ k·∫øt n·ªëi v√† t∆∞∆°ng t√°c v·ªõi c∆° s·ªü d·ªØ li·ªáu MySQL
import axios from "axios"; // Th∆∞ vi·ªán ƒë·ªÉ th·ª±c hi·ªán c√°c y√™u c·∫ßu HTTP, nh∆∞ g·ªçi API t·ª´ Bing
import { JSDOM } from "jsdom";
import { fileURLToPath } from "url"; // Import fileURLToPath
import { dirname } from "path"; // Import dirname
import path from "path";
import session from "express-session"; // To manage sessions
import dotenv from "dotenv"; // To manage sessions
dotenv.config();
import cors from "cors";
import { createProxyMiddleware } from "http-proxy-middleware";
import { tavily } from "@tavily/core";
import cookie from "cookie"; // nh·ªõ import th∆∞ vi·ªán cookie n·∫øu d√πng

// Get the directory name from import.meta.url
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Kh·ªüi t·∫°o ·ª©ng d·ª•ng
const app = express(); // App bi·∫øn ƒë·∫°i di·ªán cho ·ª©ng d·ª•ng Express

// ‚ö†Ô∏è ƒê·∫∑t proxy TR∆Ø·ªöC khi d√πng static
app.use(
  "/api",
  createProxyMiddleware({
    target: "http://localhost:8080",
    changeOrigin: true,
    pathRewrite: { "^/api": "" }, // /api/search => /search
  })
);

app.use(bodyParser.json()); // Middleware gi√∫p x·ª≠ l√Ω c√°c request v·ªõi d·ªØ li·ªáu JSON
app.use(bodyParser.urlencoded({ extended: true })); // Middleware x·ª≠ l√Ω d·ªØ li·ªáu URL-encoded t·ª´ c√°c form HTML
app.use(express.static(path.join(__dirname, "public")));
// Set up express session
app.use(
  session({
    secret: "hotel_search_digi", // A secret key to sign the session ID cookie
    resave: false,
    saveUninitialized: true,
    cookie: { secure: false }, // 'secure: false' for non-HTTPS environments
  })
);

const dom = new JSDOM(
  `<!DOCTYPE html><html><body><button id="searchButton">Search</button></body></html>`
);
const document = dom.window.document;

// C·∫•u h√¨nh Azure SQL Database
const dbConfig = {
  user: process.env.DB_USER, // T√™n ƒëƒÉng nh·∫≠p v√†o Azure SQL Database
  password: process.env.DB_PASSWORD, // M·∫≠t kh·∫©u ƒëƒÉng nh·∫≠p v√†o Azure SQL Database
  server: process.env.DB_SERVER, // T√™n m√°y ch·ªß c·ªßa Azure SQL Database
  database: process.env.DB_NAME, // T√™n c∆° s·ªü d·ªØ li·ªáu c·∫ßn k·∫øt n·ªëi
  option: {
    encrypt: true, // Y√™u c·∫ßu m√£ h√≥a k·∫øt n·ªëi (SSL) khi k·∫øt n·ªëi t·ªõi Azure SQL Database
    trustServerCertificate: false, // Kh√¥ng tin c·∫≠y ch·ª©ng ch·ªâ c·ªßa m√°y ch·ªß n·∫øu kh√¥ng s·ª≠ d·ª•ng ch·ª©ng ch·ªâ SSL ƒë√°ng tin c·∫≠y
  },
};

// K·∫øt n·ªëi ƒë·∫øn Azure SQL Database
let pool; // Khai b√°o bi·∫øn pool ƒë·ªÉ qu·∫£n l√Ω k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu, gi√∫p t√°i s·ª≠ d·ª•ng k·∫øt n·ªëi

// H√†m k·∫øt n·ªëi t·ªõi Azure SQL Database
async function connectToDatabase() {
  try {
    pool = await sql.connect(dbConfig); // K·∫øt n·ªëi t·ªõi c∆° s·ªü d·ªØ li·ªáu v·ªõi c·∫•u h√¨nh ƒë√£ ƒë·ªãnh nghƒ©a
    console.log("ƒê√£ k·∫øt n·ªëi ƒë·∫øn Azure SQL Database"); // In th√¥ng b√°o khi k·∫øt n·ªëi th√†nh c√¥ng
  } catch (error) {
    console.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Azure SQL Database:", error); // In th√¥ng b√°o l·ªói n·∫øu k·∫øt n·ªëi kh√¥ng th√†nh c√¥ng
  }
}

await connectToDatabase(); // G·ªçi h√†m k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu

// Middleware to check if the user is logged in
function checkAuthenticated(req, res, next) {
  if (req.session.isAuthenticated) {
    return next();
    // return next(); // If user is authenticated, proceed to the next middleware or route handler
  } else {
    res.redirect("/"); // If not authenticated, redirect to the login page
  }
}

// danh s√°ch c√°c API key Tavily
const apiTavilyKeys = [
  process.env.TAVILY_API_KEY_1,
  process.env.TAVILY_API_KEY_2,
  process.env.TAVILY_API_KEY_3,
  process.env.TAVILY_API_KEY_4,
  process.env.TAVILY_API_KEY_5,
  process.env.TAVILY_API_KEY_6,
  process.env.TAVILY_API_KEY_7,
  process.env.TAVILY_API_KEY_8,
  process.env.TAVILY_API_KEY_9,
  process.env.TAVILY_API_KEY_10,
];

let currentKeyTavilyIndex = 0;
function getClient() {
  const key = apiTavilyKeys[currentKeyTavilyIndex];
  return tavily({ apiKey: key });
}
async function searchWithRetry(query) {
  let attempts = 0;
  const maxAttempts = apiTavilyKeys.length;

  while (attempts < maxAttempts) {
    const client = getClient();

    try {
      // th·ª≠ g·ªçi API
      const result = await client.search(query);
      return result;
    } catch (error) {
      const status = error?.response?.status || 0;

      // Ki·ªÉm tra xem l·ªói c√≥ ph·∫£i do h·∫øt quota kh√¥ng
      if (status === 403 || status === 422 || status === 429) {
        console.warn(
          `API key ${
            currentKeyIndex + 1
          } h·∫øt l∆∞·ª£t trong th√°ng, chuy·ªÉn key ti·∫øp theo...`
        );
        currentKeyIndex++;

        if (currentKeyIndex >= apiTavilyKeys.length) {
          throw new Error("T·∫•t c·∫£ API key ƒë√£ h·∫øt l∆∞·ª£t trong th√°ng!");
        }

        attempts++;
      } else {
        // N·∫øu l√† l·ªói kh√°c kh√¥ng ph·∫£i quota ‚Üí tr·∫£ v·ªÅ l·ªói ngay
        throw error;
      }
    }
  }

  throw new Error("Kh√¥ng th·ªÉ th·ª±c hi·ªán search sau khi th·ª≠ t·∫•t c·∫£ API key.");
}

// danh s√°ch c√°c API key Go
const apiGoogleKeys = [
  process.env.GO_API_KEY_1,
  process.env.GO_API_KEY_2,
  process.env.GO_API_KEY_3,
  process.env.GO_API_KEY_4,
  process.env.GO_API_KEY_5,
  process.env.GO_API_KEY_6,
  process.env.GO_API_KEY_7,
  process.env.GO_API_KEY_8,
  process.env.GO_API_KEY_9,
  process.env.GO_API_KEY_10,
];

const SEARCH_ENGINE_ID = process.env.GOOGLE_SEARCH_ENGINE_ID; // cx

let currentKeyGoogleIndex = 0;
// H√†m g·ªçi Google Search API v·ªõi key hi·ªán t·∫°i
async function callGoogleSearchAPI(query, apiKey) {
  const url = "https://www.googleapis.com/customsearch/v1";

  const response = await axios.get(url, {
    params: {
      key: apiKey,
      cx: SEARCH_ENGINE_ID,
      q: query,
    },
  });

  return response.data;
}

// H√†m t√¨m ki·∫øm c√≥ retry qua c√°c API key
async function searchWithRetryGo(query) {
  let attempts = 0;
  const maxAttempts = apiGoogleKeys.length;

  while (attempts < maxAttempts) {
    const apiKey = apiGoogleKeys[currentKeyGoogleIndex];

    try {
      const result = await callGoogleSearchAPI(query, apiKey);
      return result;
    } catch (error) {
      const status = error?.response?.status || 0;

      if ([403, 429].includes(status)) {
        console.warn(
          `API key #${
            currentKeyGoogleIndex + 1
          } b·ªã gi·ªõi h·∫°n (status ${status}). Chuy·ªÉn sang key ti·∫øp theo...`
        );
        currentKeyGoogleIndex++;

        if (currentKeyGoogleIndex >= apiGoogleKeys.length) {
          throw new Error("T·∫•t c·∫£ API key ƒë√£ h·∫øt l∆∞·ª£t ho·∫∑c b·ªã gi·ªõi h·∫°n.");
        }

        attempts++;
      } else {
        // L·ªói kh√°c ngo√†i quota ‚Üí d·ª´ng l·∫°i lu√¥n
        console.error(
          "L·ªói khi g·ªçi Google API:",
          error.response?.data || error.message
        );
        throw error;
      }
    }
  }

  throw new Error("Kh√¥ng th·ªÉ th·ª±c hi·ªán t√¨m ki·∫øm sau khi th·ª≠ t·∫•t c·∫£ API key.");
}

// ƒê·ªãnh tuy·∫øn cho trang ƒëƒÉng nh·∫≠p
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "login.html"));
});
app.get("/AZURE_CHILD", checkAuthenticated, (req, res) => {
  res.sendFile(path.join(__dirname, "public", "hotelSearchChild.html"));
});
app.get("/BRAVE_MASTER", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "hotelSearchMaster.html"));
});
app.get("/CRAWLBASE_MASTER", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "crawlbaseMaster.html"));
});
app.get("/searchXNG", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "hotelSearchXNG.html"));
});
app.get("/roomXNG", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "hotelRoomXNG.html"));
});
app.get("/searchGo", checkAuthenticated, (req, res) => {
  res.sendFile(path.join(__dirname, "public", "hotelSearchGoogle.html"));
});
app.get("/searchApiGo", checkAuthenticated, async (req, res) => {
  console.log("Query string nh·∫≠n ƒë∆∞·ª£c:", req.query); // üëà d√≤ng n√†y ƒë·ªÉ debug
  const query = req.query.q; // Default query if none provided

  if (!query) {
    return res.status(400).json({ error: "Thi·∫øu tham s·ªë q" });
  }

  try {
    const result = await searchWithRetryGo(query);
    res.json(result);
  } catch (error) {
    console.error("Go error:", error);
    res.status(500).json({
      error: "Search Failed",
      details: error.message || error.toString(),
    });
  }
});
app.get("/searchTavily", checkAuthenticated, (req, res) => {
  res.sendFile(path.join(__dirname, "public", "hotelSearchTavily.html"));
});
app.get("/searchApiTavily", checkAuthenticated, async (req, res) => {
  console.log("Query string nh·∫≠n ƒë∆∞·ª£c:", req.query); // üëà d√≤ng n√†y ƒë·ªÉ debug
  const query = req.query.q; // Default query if none provided

  if (!query) {
    return res.status(400).json({ error: "Thi·∫øu tham s·ªë q" });
  }

  try {
    const result = await searchWithRetry(query);
    res.json(result);
  } catch (error) {
    console.error("Tavily error:", error);
    res.status(500).json({
      error: "Search Failed",
      details: error.message || error.toString(),
    });
  }
});

// X·ª≠ l√Ω y√™u c·∫ßu ƒëƒÉng nh·∫≠p
app.post("/login", async (req, res) => {
  const usernameEnv = process.env.MY_USERNAME;
  const passwordEnv = process.env.MY_PASSWORD;
  const { username, password } = req.body;
  console.log("Username:", username);
  console.log("Password:", password);
  console.log("Env username:", usernameEnv);
  console.log("Env password:", passwordEnv);

  try {
    if (username == usernameEnv && password == passwordEnv) {
      req.session.isAuthenticated = true; // ƒê√°nh d·∫•u user ƒë√£ ƒëƒÉng nh·∫≠p
      // Set th√™m cookie th·ªß c√¥ng (v√≠ d·ª• token)
      const tokenValue = "gi√° tr·ªã token ·ªü ƒë√¢y"; // c√≥ th·ªÉ l√† JWT ho·∫∑c g√¨ ƒë√≥
      res.setHeader(
        "Set-Cookie",
        cookie.serialize("token", tokenValue, {
          httpOnly: true,
          secure: process.env.NODE_ENV === "production", // true khi deploy Vercel
          sameSite: "lax",
          path: "/",
          maxAge: 60 * 60 * 24 * 7, // 7 ng√†y
        })
      );
      res.redirect("/SEARCHTAVILY"); // Redirect to a protected page after successful login
    } else {
      // Tr·∫£ v·ªÅ trang th√¥ng b√°o r·ªìi t·ª± ƒë·ªông redirect sau 5 gi√¢y
      res.status(401).send(`
      <h1>Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u</h1>
      <p>Trang s·∫Ω t·ª± ƒë·ªông chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p sau 3 gi√¢y...</p>
      <script>
        setTimeout(() => {
          window.location.href = '/';
        }, 3000);
      </script>
    `);
    }
  } catch (error) {
    console.error("L·ªói khi ki·ªÉm tra ƒëƒÉng nh·∫≠p:", error);
    res.status(500).send(`
      <h1>L·ªói m√°y ch·ªß.</h1>
      <p>Trang s·∫Ω t·ª± ƒë·ªông chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p sau 3 gi√¢y...</p>
      <script>
        setTimeout(() => {
          window.location.href = '/login';
        }, 3000);
      </script>
    `);
  }
});
// Route for logging out (to clear the session)
app.get("/logout", (req, res) => {
  req.session.destroy((err) => {
    if (err) {
      return res.status(500).send("L·ªói khi ƒëƒÉng xu·∫•t.");
    }
    res.redirect("/"); // Redirect to login page after logout
  });
});

app.listen(process.env.PORT || 3000, "0.0.0.0", () => {
  console.log(`Server ƒëang ch·∫°y t·∫°i http://localhost:${process.env.PORT}`);
});
